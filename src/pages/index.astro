---
import Layout from "../layouts/Layout.astro";
import Header from "@components/sections/Header.astro";
import Splash from "@components/sections/Splash.astro";
import AboutMe from "@components/sections/AboutMe.astro";
import Resources from "@components/sections/Resources.astro";
import Footer from "@components/sections/Footer.astro";
---

<Layout>
  <Header />
  <main>
    <Splash />
    <AboutMe />
    <Resources />
  </main>
  <Footer />
</Layout>

<style is:global>
  /* animate background-hue 0.5s linear; */

  @property --background-hue {
    syntax: "<number>";
    inherits: false;
    initial-value: 0;
  }

  /* @property --background-lightness {
    syntax: "<number>";
    inherits: false;
    initial-value: 50%;
  } */

  body {
    animation: rainbow-background-animation 10s linear infinite;

    background-color: oklch(
      var(--background-lightness) var(--background-saturation)
        var(--background-hue)
    );
  }

  @keyframes rainbow-background-animation {
    0% {
      --background-hue: 0;
    }
    100% {
      --background-hue: 360;
    }
  }
</style>

<script>
  // const root = document.querySelector(":root");
  // let hue = Math.floor(Math.random() * 360);
  // const changeBackgroundHUE = () => {
  //   hue = hue % 360; //reset please!
  //   root.style.setProperty("--background-hue", ++hue % 360);
  // };
  // setInterval(changeBackgroundHUE, 50);

  const eyeLeft = document.getElementById("eye_left");
  const eyeRight = document.getElementById("eye_right");

  let mouseX = 0;
  let mouseY = 0;

  document.addEventListener("mousemove", (event) => {
    mouseX = event.pageX;
    mouseY = event.pageY;
    changeEyesPosition(mouseX, mouseY);
  });

  function touch(event) {
    mouseX = event.touches[0].pageX;
    mouseY = event.touches[0].pageY;
    changeEyesPosition(mouseX, mouseY);
  }

  document.addEventListener("touchstart", touch);
  document.addEventListener("touchmove", touch);
  document.addEventListener("touchend", touch);

  function withCenter(boundingBox) {
    boundingBox.centerX = (boundingBox.left + boundingBox.right) / 2;
    boundingBox.centerY = (boundingBox.top + boundingBox.bottom) / 2;
    boundingBox.centerToString = `${boundingBox.centerX}px ${boundingBox.centerY}px`;
    return boundingBox;
  }

  const TRANSFORMATION = 1;
  const MAX_RADIUS = 25;

  function getTransformation(x, y, box) {
    let nx = x - box.centerX;
    let ny = y - box.centerY;

    let distance = Math.sqrt(Math.pow(nx, 2) + Math.pow(ny, 2));
    let alpha = Math.atan(ny / nx);
    alpha = nx < 0 ? alpha + Math.PI : alpha;

    return `rotate( ${alpha}rad ) translate( ${Math.min(
      distance * TRANSFORMATION,
      MAX_RADIUS
    )}px )`;
  }

  function changeEyesPosition(x, y) {
    eyeLeft.style.transform = getTransformation(
      x,
      y,
      withCenter(eyeLeft.getBoundingClientRect())
    );
    eyeRight.style.transform = getTransformation(
      x,
      y,
      withCenter(eyeRight.getBoundingClientRect())
    );
  }
</script>
